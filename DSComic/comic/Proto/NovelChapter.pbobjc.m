// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: novelChapter.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "NovelChapter.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(NovelChapterItemResponse);
GPBObjCClassDeclaration(NovelChapterVolumeResponse);

#pragma mark - NovelChapterRoot

@implementation NovelChapterRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - NovelChapterRoot_FileDescriptor

static GPBFileDescriptor *NovelChapterRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - NovelChapterResponse

@implementation NovelChapterResponse

@dynamic errnum;
@dynamic errmsg;
@dynamic hasData_p, data_p;

typedef struct NovelChapterResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t errnum;
  NSString *errmsg;
  NovelChapterVolumeResponse *data_p;
} NovelChapterResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "errnum",
        .dataTypeSpecific.clazz = Nil,
        .number = NovelChapterResponse_FieldNumber_Errnum,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NovelChapterResponse__storage_, errnum),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "errmsg",
        .dataTypeSpecific.clazz = Nil,
        .number = NovelChapterResponse_FieldNumber_Errmsg,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NovelChapterResponse__storage_, errmsg),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(NovelChapterVolumeResponse),
        .number = NovelChapterResponse_FieldNumber_Data_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NovelChapterResponse__storage_, data_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NovelChapterResponse class]
                                     rootClass:[NovelChapterRoot class]
                                          file:NovelChapterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NovelChapterResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001F\000\002F\000\003\000Data\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NovelChapterVolumeResponse

@implementation NovelChapterVolumeResponse

@dynamic volumeId;
@dynamic volumeName;
@dynamic volumeOrder;
@dynamic chaptersArray, chaptersArray_Count;

typedef struct NovelChapterVolumeResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t volumeId;
  int32_t volumeOrder;
  NSString *volumeName;
  NSMutableArray *chaptersArray;
} NovelChapterVolumeResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "volumeId",
        .dataTypeSpecific.clazz = Nil,
        .number = NovelChapterVolumeResponse_FieldNumber_VolumeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NovelChapterVolumeResponse__storage_, volumeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "volumeName",
        .dataTypeSpecific.clazz = Nil,
        .number = NovelChapterVolumeResponse_FieldNumber_VolumeName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NovelChapterVolumeResponse__storage_, volumeName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "volumeOrder",
        .dataTypeSpecific.clazz = Nil,
        .number = NovelChapterVolumeResponse_FieldNumber_VolumeOrder,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NovelChapterVolumeResponse__storage_, volumeOrder),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chaptersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(NovelChapterItemResponse),
        .number = NovelChapterVolumeResponse_FieldNumber_ChaptersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NovelChapterVolumeResponse__storage_, chaptersArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NovelChapterVolumeResponse class]
                                     rootClass:[NovelChapterRoot class]
                                          file:NovelChapterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NovelChapterVolumeResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\004\001H\000\002J\000\003K\000\004\000Chapters\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NovelChapterItemResponse

@implementation NovelChapterItemResponse

@dynamic chapterId;
@dynamic chapterName;
@dynamic chapterOrder;

typedef struct NovelChapterItemResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t chapterId;
  int32_t chapterOrder;
  NSString *chapterName;
} NovelChapterItemResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "chapterId",
        .dataTypeSpecific.clazz = Nil,
        .number = NovelChapterItemResponse_FieldNumber_ChapterId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NovelChapterItemResponse__storage_, chapterId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "chapterName",
        .dataTypeSpecific.clazz = Nil,
        .number = NovelChapterItemResponse_FieldNumber_ChapterName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NovelChapterItemResponse__storage_, chapterName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "chapterOrder",
        .dataTypeSpecific.clazz = Nil,
        .number = NovelChapterItemResponse_FieldNumber_ChapterOrder,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NovelChapterItemResponse__storage_, chapterOrder),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NovelChapterItemResponse class]
                                     rootClass:[NovelChapterRoot class]
                                          file:NovelChapterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NovelChapterItemResponse__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001I\000\002K\000\003L\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
